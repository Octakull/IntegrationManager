name: Build UnityPackage

on:
  push:
    tags:
      - '*'

jobs:
  conditional-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Read Details
      run: |
        echo "DETAILS_JSON=$(jq -c . < Details.json)" >> $GITHUB_ENV
    - run: |
        echo "Details Version: ${{ fromJson(env.DETAILS_JSON).version }}"

    - name: Create IntegrationManager Directory
      run: |
        mkdir -p IntegrationManager
        
        # Copy assets to IntegrationManager
        find . -maxdepth 1 -mindepth 1 -not -name "IntegrationManager" -exec cp -R {} IntegrationManager/ \;
        echo "Repository files copied to IntegrationManager."

        # Create .meta files for IntegrationManager
        touch IntegrationManager.meta
        echo "fileFormatVersion: 2" > IntegrationManager.meta
        echo "guid: e179bf41f223f1b478e0c00e9f819864" >> IntegrationManager.meta
        echo "folderAsset: yes" >> IntegrationManager.meta
        echo "DefaultImporter:" >> IntegrationManager.meta
        echo "  externalObjects: {}" >> IntegrationManager.meta
        echo "  userData:" >> IntegrationManager.meta
        echo "  assetBundleName:" >> IntegrationManager.meta
        echo "  assetBundleVariant:" >> IntegrationManager.meta
        
    - name: Create GlitchSDK Directory
      run: |
        mkdir -p GlitchSDK
        
        # Copy assets to GlitchSDK
        cp -R IntegrationManager GlitchSDK/
        echo "IntegrationManager copied to GlitchSDK."
        
    - name: Create Assets Directory
      run: |
        mkdir -p Assets
        
        # Copy GlitchSDK to Assets
        cp -R GlitchSDK Assets/
        echo "GlitchSDK copied to Assets."

        # Create .meta files for GlitchSDK
        touch Assets/GlitchSDK.meta
        echo "fileFormatVersion: 2" > Assets/GlitchSDK.meta
        echo "guid: 35413811acd778c49a42dd3a6f867699" >> Assets/GlitchSDK.meta
        echo "folderAsset: yes" >> Assets/GlitchSDK.meta
        echo "DefaultImporter:" >> Assets/GlitchSDK.meta
        echo "  externalObjects: {}" >> Assets/GlitchSDK.meta
        echo "  userData:" >> Assets/GlitchSDK.meta
        echo "  assetBundleName:" >> Assets/GlitchSDK.meta
        echo "  assetBundleVariant:" >> Assets/GlitchSDK.meta
    
    - run: |
        echo "Assets/GlitchSDK.meta" > metaList
        find Assets/GlitchSDK/ -name \*.meta >> metaList
    
    - run: mkdir a

    - uses: pCYSl5EDgo/create-unitypackage@master
      with:
        package-path: 'a/IntegrationManager.unitypackage'
        include-files: metaList
    - uses: actions/upload-artifact@master
      with:
        path: a
        name: package

    - name: Compare Tag Name and Details version
      run: |
        if [ "${{ github.ref }}" != "refs/tags/${{ fromJson(env.DETAILS_JSON).version }}" ];
        then
          echo "Tag name and Details version does not match. Skipping release creation."
          exit 0  # Exit with success to stop further steps
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ fromJson(env.DETAILS_JSON).version }}
        release_name: v${{ fromJson(env.DETAILS_JSON).version }}
        body: ${{ join('\n', fromJson(env.DETAILS_JSON).releaseNotes) }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: 'a/IntegrationManager.unitypackage'
        asset_name: IntegrationManager.unitypackage
        asset_content_type: application/octet-stream
